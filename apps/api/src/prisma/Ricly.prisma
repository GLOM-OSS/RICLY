datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Gender {
    Male
    Female

    @@map("gender_enum")
}

enum Lang {
    en
    fr

    @@map("lang_enum")
}

model Person {
    person_id      String   @id @default(uuid()) @db.VarChar(36)
    fullname       String?  @db.VarChar(50)
    phone_number   String?  @db.VarChar(15)
    gender         Gender?
    email          String   @unique @db.VarChar(50)
    preferred_lang Lang     @default(fr)
    created_at     DateTime @default(now()) @db.DateTime(0)

    Secretaries Secretary[]
    Students    Student[]
    Teachers    Teacher[]
    Developers  Developer[]
}

model Developer {
    developer_id String   @id @default(uuid()) @db.VarChar(36)
    password     String?  @db.VarChar(75)
    created_at   DateTime @default(now()) @db.DateTime(0)
    person_id    String   @db.VarChar(36)
    Person       Person   @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade)

    Schools School[]
}

model School {
    school_id                String    @id @default(uuid()) @db.VarChar(36)
    school_name              String    @db.VarChar(50)
    school_acronym           String    @db.VarChar(50)
    school_domain            String?   @unique @db.VarChar(50)
    school_code              String    @unique @db.VarChar(45)
    api_key                  String    @db.VarChar(75)
    api_test_key             String    @db.VarChar(45)
    api_calls_used           Int
    api_calls_left           Int
    test_api_calls_left      Int       @default(30)
    course_period_in_minutes Int?
    is_deleted               Boolean   @default(false) @db.TinyInt
    created_at               DateTime  @default(now()) @db.DateTime(0)
    developer_id             String    @db.VarChar(36)
    Developer                Developer @relation(fields: [developer_id], references: [developer_id], onDelete: Cascade, onUpdate: Cascade)

    Secretaries   Secretary[]
    Buildings     Building[]
    Classrooms    Classroom[]
    Subscriptions Subscription[]
    Teachers      Teacher[]
}

model Subscription {
    subscription_id String   @id @default(uuid()) @db.VarChar(36)
    number_of_apis  Int
    total_paid      Int
    unit_price      Int
    transaction_id  String   @db.VarChar(45)
    subscribed_at   DateTime @default(now()) @db.DateTime(0)
    school_id       String   @db.VarChar(36)
    School          School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade, onUpdate: Cascade)
}

model Secretary {
    secretary_id String   @id @default(uuid()) @db.VarChar(36)
    created_at   DateTime @default(now()) @db.DateTime(0)
    school_id    String   @db.VarChar(36)
    School       School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade, onUpdate: Cascade)
    person_id    String   @db.VarChar(36)
    Person       Person   @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
}

model Student {
    student_id   String    @id @default(uuid()) @db.VarChar(36)
    matricule    String    @db.VarChar(45)
    is_deleted   Boolean   @default(false) @db.TinyInt
    created_at   DateTime  @default(now()) @db.DateTime(0)
    classroom_id String    @db.VarChar(36)
    Classroom    Classroom @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade, onUpdate: Cascade)
    person_id    String    @db.VarChar(36)
    Person       Person    @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
}

enum TeacherTypeEnum {
    PART_TIME
    PERMAMENT
    MISSIONARY

    @@map("teacher_type_enum")
}

model Teacher {
    teacher_id     String          @id @default(uuid()) @db.VarChar(36)
    hours_per_week Int
    teacher_type   TeacherTypeEnum
    is_deleted     Boolean         @default(false) @db.TinyInt
    created_at     DateTime        @default(now()) @db.DateTime(0)
    person_id      String          @db.VarChar(36)
    Person         Person          @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: Cascade)
    school_id      String          @db.VarChar(36)
    School         School          @relation(fields: [school_id], references: [school_id], onDelete: Cascade, onUpdate: Cascade)

    Availabilities       Availability[]
    Classrooms           Classroom[]
    ClassroomHasSubjects ClassroomHasSubject[]
}

model Availability {
    availability_id String   @id @default(uuid()) @db.VarChar(36)
    starts_at       DateTime
    ends_time       DateTime
    is_used         Boolean  @db.TinyInt
    is_deleted      Boolean  @default(false) @db.TinyInt
    created_at      DateTime @default(now()) @db.DateTime(0)
    teacher_id      String   @db.VarChar(36)
    Teacher         Teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: Cascade)
}

model Building {
    building_id   String   @id @default(uuid()) @db.VarChar(36)
    building_code String   @unique @db.VarChar(30)
    is_deleted    Boolean  @default(false) @db.TinyInt
    created_at    DateTime @default(now()) @db.DateTime(0)
    school_id     String   @db.VarChar(36)
    School        School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade, onUpdate: Cascade)

    Halls Hall[]
}

model Hall {
    hall_id       String   @id @default(uuid()) @db.VarChar(36)
    hall_code     String   @unique @db.VarChar(30)
    hall_capacity Int
    is_deleted    Boolean  @default(false) @db.TinyInt
    created_at    DateTime @default(now()) @db.DateTime(0)
    building_id   String   @db.VarChar(36)
    Building      Building @relation(fields: [building_id], references: [building_id], onDelete: Cascade, onUpdate: Cascade)

    Programs   Program[]
    Classrooms Classroom[]
}

model Classroom {
    classroom_id      String   @id @default(uuid()) @db.VarChar(36)
    classroom_name    String   @db.VarChar(45)
    classroom_code    String   @unique @db.VarChar(45)
    classroom_acronym String   @db.VarChar(45)
    day_start_time    DateTime @db.DateTime(0)
    day_end_time      DateTime @db.DateTime(0)
    is_deleted        Boolean  @default(false) @db.TinyInt
    created_at        DateTime @default(now()) @db.DateTime(0)
    school_id         String
    School            School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade, onUpdate: Cascade)
    coordinator       String
    Coordinator       Teacher  @relation(fields: [coordinator], references: [teacher_id], onDelete: Cascade, onUpdate: Cascade)
    hall_id           String?
    Hall              Hall?    @relation(fields: [hall_id], references: [hall_id], onDelete: Cascade, onUpdate: Cascade)

    Breaks               Break[]
    Students             Student[]
    ClassroomHasSubjects ClassroomHasSubject[]
}

model Subject {
    subject_id   String   @id @default(uuid()) @db.VarChar(36)
    subject_name String   @db.VarChar(45)
    is_deleted   Boolean  @default(false) @db.TinyInt
    created_at   DateTime @default(now()) @db.DateTime(0)

    ClassroomHasSubject ClassroomHasSubject[]
}

model ClassroomHasSubject {
    classroom_has_subject_id String    @id @default(uuid()) @db.VarChar(36)
    subject_id               String
    Subject                  Subject   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade, onUpdate: Cascade)
    classroom_id             String
    Classroom                Classroom @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade, onUpdate: Cascade)
    teacher_id               String
    Teacher                  Teacher   @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: Cascade)

    Programs Program[]
}

model Break {
    break_id     String    @id @default(uuid()) @db.VarChar(36)
    start_time   DateTime  @default(now()) @db.DateTime(0)
    end_time     DateTime  @default(now()) @db.DateTime(0)
    is_deleted   Boolean   @default(false) @db.TinyInt
    created_at   DateTime  @default(now()) @db.DateTime(0)
    classroom_id String    @db.VarChar(36)
    Classroom    Classroom @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade, onUpdate: Cascade)
}

model Program {
    program_id               String              @id @default(uuid()) @db.VarChar(36)
    starts_at                DateTime            @db.DateTime(0)
    ends_time                DateTime            @db.DateTime(0)
    is_published             Boolean             @default(false) @db.TinyInt
    is_deleted               Boolean             @default(false) @db.TinyInt
    created_at               DateTime            @default(now()) @db.DateTime(0)
    hall_id                  String
    Hall                     Hall                @relation(fields: [hall_id], references: [hall_id], onDelete: Cascade, onUpdate: Cascade)
    classroom_has_subject_id String
    ClassroomHasSubject      ClassroomHasSubject @relation(fields: [classroom_has_subject_id], references: [classroom_has_subject_id], onDelete: Cascade, onUpdate: Cascade)
}
